{"version":3,"sources":["features/counter/Counter.module.css","features/counter/counterSlice.ts","features/counter/Counter.tsx","features/posts/postsSlice.ts","features/posts/AddPostForm.tsx","features/posts/PostsList.tsx","commons/sleep.ts","features/colors/colorsSlice.ts","features/colors/SearchForm.tsx","features/colors/ColorsList.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","counterSlice","createSlice","name","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","selectCount","counter","Counter","count","useSelector","dispatch","useDispatch","useState","incrementAmount","setIncrementAmount","className","styles","row","button","aria-label","onClick","textbox","onChange","e","target","Number","asyncButton","amount","setTimeout","postsSlice","id","title","content","postAdded","reducer","push","prepare","nanoid","selectPosts","posts","AddPostForm","setTitle","setContent","htmlFor","type","currentTarget","PostsList","renderedPosts","map","post","substring","sleep","ms","Promise","r","colorsSlice","hex","selected","toggleColorSelected","color","find","colorAdded","selectColors","colors","SearchForm","keywords","setKeywords","debouncedDispatch","useDebouncedCallback","callback","a","randomColor","Math","floor","random","toString","addRandom","ColorsList","renderedColors","style","userSelect","backgroundColor","cursor","App","exact","path","render","to","store","configureStore","counterReducer","postsReducer","colorsReducer","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5b03ed7d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__2jLpE\",\"value\":\"Counter_value__UyBJw\",\"button\":\"Counter_button__1MqfQ\",\"textbox\":\"Counter_textbox__3FtGU\",\"asyncButton\":\"Counter_asyncButton__2n1yl Counter_button__1MqfQ\"};","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { AppThunk, RootState } from '../../app/store'\r\n\r\ninterface CounterState {\r\n  value: number\r\n}\r\n\r\nconst initialState: CounterState = {\r\n  value: 0,\r\n}\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action: PayloadAction<number>) => {\r\n      state.value += action.payload\r\n    },\r\n  },\r\n})\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = (amount: number): AppThunk => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount))\r\n  }, 1000)\r\n}\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCount = (state: RootState) => state.counter.value\r\n\r\nexport default counterSlice.reducer\r\n","import React, { useState } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport {\r\n  decrement,\r\n  increment,\r\n  incrementByAmount,\r\n  incrementAsync,\r\n  selectCount,\r\n} from './counterSlice'\r\nimport styles from './Counter.module.css'\r\n\r\nexport function Counter() {\r\n  const count = useSelector(selectCount)\r\n  const dispatch = useDispatch()\r\n  const [incrementAmount, setIncrementAmount] = useState('2')\r\n\r\n  return (\r\n    <div>\r\n      <div className={styles.row}>\r\n        <button\r\n          className={styles.button}\r\n          aria-label=\"Increment value\"\r\n          onClick={() => dispatch(increment())}\r\n        >\r\n          +\r\n        </button>\r\n        <span className={styles.value}>{count}</span>\r\n        <button\r\n          className={styles.button}\r\n          aria-label=\"Decrement value\"\r\n          onClick={() => dispatch(decrement())}\r\n        >\r\n          -\r\n        </button>\r\n      </div>\r\n      <div className={styles.row}>\r\n        <input\r\n          className={styles.textbox}\r\n          aria-label=\"Set increment amount\"\r\n          value={incrementAmount}\r\n          onChange={e => setIncrementAmount(e.target.value)}\r\n        />\r\n        <button\r\n          className={styles.button}\r\n          onClick={() =>\r\n            dispatch(incrementByAmount(Number(incrementAmount) || 0))\r\n          }\r\n        >\r\n          Add Amount\r\n        </button>\r\n        <button\r\n          className={styles.asyncButton}\r\n          onClick={() => dispatch(incrementAsync(Number(incrementAmount) || 0))}\r\n        >\r\n          Add Async\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { createSlice, nanoid, PayloadAction } from '@reduxjs/toolkit'\r\nimport { RootState } from '../../app/store'\r\n\r\ninterface Post {\r\n  id: string\r\n  title: string\r\n  content: string\r\n}\r\n\r\ntype PostsState = Post[]\r\n\r\nconst initialState: PostsState = [\r\n  { id: '1', title: 'First Post!', content: 'Hello!' },\r\n  { id: '2', title: 'Second Post', content: 'More text' }\r\n]\r\n\r\nconst postsSlice = createSlice({\r\n  name: 'posts',\r\n  initialState,\r\n  reducers: {\r\n    postAdded: {\r\n      reducer(state, action: PayloadAction<Post>) {\r\n        state.push(action.payload)\r\n      },\r\n      prepare(title, content) {\r\n        return {\r\n          payload: {\r\n            id: nanoid(),\r\n            title,\r\n            content\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n})\r\n\r\nexport const { postAdded } = postsSlice.actions\r\n\r\nexport const selectPosts = (state: RootState) => state.posts\r\n\r\nexport default postsSlice.reducer","import React, { useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\n\r\nimport { postAdded } from './postsSlice'\r\n\r\n\r\nexport const AddPostForm = () => {\r\n  const [title, setTitle] = useState<string>('')\r\n  const [content, setContent] = useState<string>('')\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const onTitleChanged = (e: React.FormEvent<HTMLInputElement>) =>\r\n    setTitle(e.currentTarget.value)\r\n\r\n  const onContentChanged = (e: React.FormEvent<HTMLTextAreaElement>) =>\r\n    setContent(e.currentTarget.value)\r\n\r\n  const onSavePostClicked = () => {\r\n    if (title && content) {\r\n      dispatch(\r\n        postAdded(title, content)\r\n      )\r\n\r\n      setTitle('')\r\n      setContent('')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <section>\r\n      <h2>Add a New Post</h2>\r\n      <form>\r\n        <label htmlFor=\"postTitle\">Post Title:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"postTitle\"\r\n          name=\"postTitle\"\r\n          value={title}\r\n          onChange={onTitleChanged}\r\n        />\r\n        <label htmlFor=\"postContent\">Content:</label>\r\n        <textarea\r\n          id=\"postContent\"\r\n          name=\"postContent\"\r\n          value={content}\r\n          onChange={onContentChanged}\r\n        />\r\n        <button type=\"button\" onClick={onSavePostClicked}>\r\n          Save Post\r\n        </button>\r\n      </form>\r\n    </section>\r\n  )\r\n}","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { selectPosts } from './postsSlice'\r\n\r\nexport const PostsList = () => {\r\n  const posts = useSelector(selectPosts)\r\n\r\n  const renderedPosts = posts.map(post => (\r\n    <article className=\"post-excerpt\" key={post.id}>\r\n      <h3>{post.title}</h3>\r\n      <p className=\"post-content\">{post.content.substring(0, 100)}</p>\r\n    </article>\r\n  ))\r\n\r\n  return (\r\n    <section className=\"posts-list\">\r\n      <h2>Posts</h2>\r\n      {renderedPosts}\r\n    </section>\r\n  )\r\n}","export function sleep(ms: number) {\r\n  return new Promise(r => setTimeout(r, ms))\r\n}","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\"\r\nimport { AppThunk, RootState } from \"../../app/store\"\r\nimport { sleep } from \"../../commons/sleep\"\r\n\r\nexport interface Color {\r\n  id: string,\r\n  hex: string,\r\n  name: string,\r\n  selected: boolean,\r\n}\r\n\r\ntype ColorsState = Color[]\r\n\r\nconst initialState: ColorsState = [\r\n  {\r\n    id: '#ff0000',\r\n    hex: '#ff0000',\r\n    name: 'red',\r\n    selected: false\r\n  },\r\n  {\r\n    id: '#00ff00',\r\n    hex: '#00ff00',\r\n    name: 'green',\r\n    selected: false\r\n  },\r\n  {\r\n    id: '#0000ff',\r\n    hex: '#0000ff',\r\n    name: 'blue',\r\n    selected: false\r\n  },\r\n]\r\n\r\nexport const colorsSlice = createSlice({\r\n  name: 'colors',\r\n  initialState,\r\n  reducers: {\r\n    toggleColorSelected(state, action: PayloadAction<Color>) {\r\n      const color = state.find(color => color.id === action.payload.id)\r\n\r\n      if (color) {\r\n        color.selected = !color.selected\r\n      }\r\n    },\r\n    colorAdded(state, action: PayloadAction<Color>) {\r\n      state.push(action.payload)\r\n    }\r\n  }\r\n})\r\n\r\nexport const { toggleColorSelected, colorAdded } = colorsSlice.actions\r\n\r\nexport const addRandomColor = (): AppThunk => dispatch => {\r\n  async function addRandom() {\r\n    await sleep(5000)\r\n\r\n    const randomColor = `#${Math.floor(Math.random()*16777215).toString(16)}`\r\n\r\n    dispatch(colorAdded({\r\n      id: randomColor,\r\n      hex: randomColor,\r\n      name: randomColor,\r\n      selected: false\r\n    }))\r\n  }\r\n\r\n  addRandom()\r\n}\r\n\r\nexport const selectColors = (state: RootState) => state.colors\r\n\r\nexport default colorsSlice.reducer","import React, { useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useDebouncedCallback } from 'use-debounce/lib'\r\nimport { addRandomColor } from './colorsSlice'\r\n\r\nexport const SearchForm = () => {\r\n  const [keywords, setKeywords] = useState<string>('')\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const debouncedDispatch = useDebouncedCallback(dispatch, 500)\r\n\r\n  const onKeywordsChanged = (e: React.FormEvent<HTMLInputElement>) => {\r\n    setKeywords(e.currentTarget.value)\r\n    debouncedDispatch.callback(addRandomColor())\r\n  }\r\n\r\n  return <div>\r\n    <div>============</div>\r\n    <div>Search Colors</div>\r\n    <input\r\n      aria-label=\"Enter search keywords\"\r\n      value={keywords}\r\n      onChange={onKeywordsChanged}\r\n    />\r\n  </div>\r\n}","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { selectColors, toggleColorSelected } from './colorsSlice'\r\n\r\nexport const ColorsList = () => {\r\n  const colors = useSelector(selectColors)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const renderedColors = colors.map(color => (\r\n    <div\r\n      className=\"color-wrapper pl-5\"\r\n      key={color.id}\r\n      style={{userSelect: 'none'}}\r\n    >\r\n      <span\r\n        className=\"color\"\r\n        style={{\r\n          backgroundColor: color.hex,\r\n          cursor: 'pointer'\r\n        }}\r\n        onClick={() => dispatch(toggleColorSelected(color))}\r\n      >\r\n        {color.name}\r\n      </span>\r\n      <span>&lt;= {color.selected ? 'active' : 'not active'}</span>\r\n    </div>\r\n  ))\r\n\r\n  return (\r\n    <section className=\"colors-list\">\r\n      <h2>Colors!</h2>\r\n      {renderedColors}\r\n    </section>\r\n  )\r\n}","import React from 'react'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from 'react-router-dom'\r\n\r\nimport { Counter } from './features/counter/Counter'\r\nimport { AddPostForm } from './features/posts/AddPostForm'\r\nimport { PostsList } from './features/posts/PostsList'\r\nimport { SearchForm } from './features/colors/SearchForm'\r\nimport { ColorsList } from './features/colors/ColorsList'\r\n\r\nimport './App.css'\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Switch>\r\n          <Route\r\n            exact\r\n            path=\"/\"\r\n            render={() => (\r\n              <>\r\n                <Counter />\r\n                <AddPostForm />\r\n                <PostsList />\r\n                <SearchForm />\r\n                <ColorsList />\r\n              </>\r\n            )}\r\n          />\r\n          <Redirect to=\"/\" />\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit'\r\nimport counterReducer from '../features/counter/counterSlice'\r\nimport postsReducer from '../features/posts/postsSlice'\r\nimport colorsReducer from '../features/colors/colorsSlice'\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    counter: counterReducer, //Not part of social media tutorial, kept for sake of counterSlice.ts not throwing error\r\n    posts: postsReducer,\r\n    colors: colorsReducer\r\n  },\r\n})\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\r\n}\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister()\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message)\r\n      })\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport { store } from './app/store'\r\nimport { Provider } from 'react-redux'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}